#!/bin/sh
#/ Usage: ghe-backup-es-v1.x-rsync
#/ Take an online, incremental snapshot of Elasticsearch v1.x indices. This
#/ command is used only against GitHub Enterprise v2.x appliances or greater.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup when the rsync strategy is used.
set -e

# Bring in the backup configuration
cd $(dirname "$0")/../..
. share/github-backup-utils/ghe-backup-config

# Set up remote host and root elastic backup directory based on config
host="$GHE_HOSTNAME"

# Perform a host-check and establish GHE_REMOTE_XXX variables.
ghe_remote_version_required "$host"

# Verify rsync is available.
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Make sure root backup dir exists if this is the first run
mkdir -p "$GHE_SNAPSHOT_DIR/elasticsearch"

# Take a local ES snapshot on the appliance. This writes a new snapshot to
# a /data/user/elasticsearch-snapshots directory. No data is transferred from
# the appliance to the VM at this stage.
ghe-ssh "$host" -- "ghe-es-snapshot" 1>&3

# If we have a previous increment, avoid transferring existing files via rsync's
# --link-dest support. This also decreases physical space usage considerably.
if [ -d "$GHE_DATA_DIR/current/elasticsearch" ]; then
    link_dest="--link-dest=../../current/elasticsearch"
fi

# Transfer the newly created ES snapshot data from the GitHub appliance to the
# current snapshot directory, using a previous snapshot to avoid transferring files
# that have already been transferred.
ghe-rsync -avz \
    -e "ghe-ssh -p $(ssh_port_part "$host")" \
    --rsync-path='sudo -u elasticsearch rsync' \
    $link_dest \
    --exclude='elasticsearch.yml' \
    "$(ssh_host_part "$host"):$GHE_REMOTE_DATA_USER_DIR/elasticsearch-snapshots/" \
    "$GHE_SNAPSHOT_DIR/elasticsearch" 1>&3
