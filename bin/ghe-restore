#!/bin/sh
#/ Usage: ghe-restore [-v] [-s <snapshot-id>] [<host>]
#/ Restores a GitHub instance from local backup snapshots. The <host> is the
#/ hostname or IP of the GitHub instance. The <host> may be omitted when
#/ the GHE_RESTORE_HOST config variable is set in backup.config. When a <host>
#/ argument is provided, it always overrides the configured restore host.
#/
#/ Options:
#/   -f                Don't prompt for confirmation before restoring.
#/   -c                Restore appliance settings and license in addition to
#/                     datastores. Settings are not restored by default to
#/                     prevent overwriting different configuration on the
#/                     restore host.
#/   -s <snapshot-id>  Restore from the snapshot with the given id. Available
#/                     snapshots may be listed under the data directory.
#/   -v                Enable verbose output.
#/
#/ Note that the host must be reachable and your SSH key must be setup as
#/ described in the following help article:
#/
#/ <https://enterprise.github.com/help/articles/adding-an-ssh-key-for-shell-access>
set -e

# Bring in the backup configuration.
cd $(dirname "$0")/..
. libexec/ghe-backup-config

# Parse arguments
restore_settings=false
force=false
while true; do
    case "$1" in
        -f|--force)
            force=true
            shift
            ;;
        -s)
            snapshot_id="$(basename "$2")"
            shift 2
            ;;
        -c)
            restore_settings=true
            shift
            ;;
        -*)
            echo "Error: invalid argument: '$1'" 1>&2
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# Grab the host arg
host="${1:-$GHE_RESTORE_HOST}"

# Hostname without any port suffix
hostname=$(echo "$host" | cut -f 1 -d :)

# Show usage with no <host>
[ -z "$host" ] && print_usage

# ghe-restore-snapshot-path validates it exists, determines what current is,
# and if there's any problem, exit for us
GHE_RESTORE_SNAPSHOT_PATH="$(ghe-restore-snapshot-path "$snapshot_id")"
GHE_RESTORE_SNAPSHOT=$(basename "$GHE_RESTORE_SNAPSHOT_PATH")
export GHE_RESTORE_SNAPSHOT

# Figure out whether to use the tarball or rsync restore strategy based on the
# strategy file written in the snapshot directory.
GHE_BACKUP_STRATEGY=$(cat "$GHE_RESTORE_SNAPSHOT_PATH/strategy")

# Perform a host-check and establish the remote version in GHE_REMOTE_VERSION.
ghe_remote_version_required "$host"

# Prompt to verify the restore host given is correct. Restoring overwrites
# important data on the destination appliance that cannot be recovered. This is
# mostly to prevent accidents where the backup host is given to restore instead
# of a separate restore host since they're used in such close proximity.
if ! $force; then
    echo
    echo "WARNING: All data on GitHub Enterprise appliance $hostname ($GHE_REMOTE_VERSION)"
    echo "         will be overwritten with data from snapshot ${GHE_RESTORE_SNAPSHOT}."
    echo "Please verify that this is the correct restore host before continuing."
    printf "Type 'yes' to continue: "

    while read -r response; do
        case $response in
            yes|Yes|YES)
                break
                ;;
            '')
                printf "Type 'yes' to continue: "
                ;;
            *)
                echo "Restore aborted." 1>&2
                exit 1
                ;;
        esac
    done
    echo
fi

echo "Starting $GHE_BACKUP_STRATEGY restore of $host from snapshot $GHE_RESTORE_SNAPSHOT"

# Verify the host has been fully configured at least once unless the -c
# argument was provided.
if ! $restore_settings &&
   ! ghe-ssh "$host" -- "test -f '$GHE_REMOTE_DATA_DIR/enterprise/dna.json' -o \
                              -f '$GHE_REMOTE_DATA_USER_DIR/common/dna.json'"; then
    echo "Error: $hostname not configured." 1>&2
    echo "Please visit https://$hostname/setup/settings to configure base appliance settings before continuing." 1>&2
    exit 1
fi

# Restoring Elasticsearch to 11.10.3x via rsync requires GNU tar
if [ "$GHE_VERSION_MAJOR.$GHE_VERSION_MINOR" = "1.0" ] && [ "$GHE_BACKUP_STRATEGY" = "rsync" ]; then
    if ! tar --version | grep -q GNU; then
        if ! command -v gtar >/dev/null 2>&1; then
            echo "GNU tar is required.  Aborting." >&2
            exit 1
        fi
    fi
fi

# Make sure the GitHub appliance is in maintenance mode and all writing
# processes have bled out.
ghe-maintenance-mode-enable "$host"

# Restore settings and license if requested.
if $restore_settings; then
    ghe-restore-settings "$host"
fi

# Make sure mysql and elasticsearch are prep'd and running before restoring into
# appliances v2.x or greater. These services will not have been started on appliances
# that have not been configured yet.
if [ "$GHE_VERSION_MAJOR" -ge 2 ]; then
    echo "sudo ghe-service-ensure-mysql && sudo ghe-service-ensure-elasticsearch" |
    ghe-ssh "$host" -- /bin/sh 1>&3
fi

echo "Restoring Git repositories ..."
ghe-restore-repositories-${GHE_BACKUP_STRATEGY} "$host" 1>&3

echo "Restoring GitHub Pages ..."
ghe-restore-pages-${GHE_BACKUP_STRATEGY} "$host" 1>&3

if [ "$GHE_VERSION_MAJOR" -ge 2 ]; then
    echo "Restoring asset attachments ..."
    ghe-restore-userdata alambic_assets "$host" 1>&3

    echo "Restoring hook deliveries ..."
    ghe-restore-userdata hookshot "$host" 1>&3
fi

echo "Restoring MySQL database ..."
gzip -dc "$GHE_RESTORE_SNAPSHOT_PATH/mysql.sql.gz" | ghe-ssh "$host" -- 'ghe-import-mysql' 1>&3

echo "Restoring Redis database ..."
ghe-ssh "$host" -- 'ghe-import-redis' < "$GHE_RESTORE_SNAPSHOT_PATH/redis.rdb" 1>&3

echo "Restoring SSH authorized keys ..."
ghe-ssh "$host" -- 'ghe-import-authorized-keys' < "$GHE_RESTORE_SNAPSHOT_PATH/authorized-keys.json" 1>&3

echo "Restoring Elasticsearch indices ..."
ghe-restore-es-${GHE_BACKUP_STRATEGY} "$host" 1>&3

# Perform a config run after restoring against v2.x vms. This ensures DB
# migrations are run and v1.x -> v2.x fs adjustments are made.
if [ "$GHE_VERSION_MAJOR" -ge 2 ]; then
    echo "Configuring storage ..."
    ghe-ssh "$host" -- "sudo ghe-config-apply" 1>&3
fi

echo "Restoring SSH host keys ..."
ghe-ssh "$host" -- 'ghe-import-ssh-host-keys' < "$GHE_RESTORE_SNAPSHOT_PATH/ssh-host-keys.tar" 1>&3

echo "Completed restore of $host from snapshot $GHE_RESTORE_SNAPSHOT"
echo "Visit https://$hostname/setup/settings to review appliance configuration and disable maintenance mode."
