#!/usr/bin/env bash
#/ Usage: ghe-rsync-backup
#/ Take online, incremental snapshot of all Git repository data.
set -e

# Bring in the backup configuration
cd $(dirname "$0")/..
. scripts/ghe-backup-config

# Set up remote host and root backup snapshot directory based on config
host="admin@$GHE_HOSTNAME"
backup_dir="$GHE_DATA_DIR/ghe-repositories"

# Show usage with --help
if [ "$1" = "--help" ]; then
  grep '^#/' <"$0" | cut -c 4-
  exit 1
fi

# Local file locations
backup_current="$backup_dir/current"
backup_date=$(date +"%Y%m%dT%H%M%S")
backup_named="$backup_dir/$backup_date"

# Remote file locations
remote_repo_path="/data/repositories"
sync_in_progress_file="$remote_repo_path/.sync_in_progress"

# List of remote directories to exclude when transfering repositories
rsync_extra_excludes="
    __alambic_assets__
    __gitmon__
    __hookshot__
    __nodeload_archives__
    __purgatory__
    __render__
"

# Verify rsync is available
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Verify ssh connectivity with the GHE host.
# TODO move this to use ghe-host-check instead. Should move all these nice
#      config / quick timeout options into that script.
if ! ssh -o PasswordAuthentication=no -o ConnectTimeout=5 -o ConnectionAttempts=1 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "$host" -- exit; then
    echo "Error: Couldn't connect to '$host' over ssh" 1>&2
    exit 1
fi

# Setup the basic directory structure when this is the first time we've
# performed a backup.
first_run=false
if [ ! -d "$backup_current" ]; then
  first_run=true
  mkdir -p "$backup_dir"
fi

# Cleans up the local rsync rules file and remote sync-in-progress file on exit.
cleanup() {
  rm -f repo_conf_sync_rules
  ssh "$host" -- "sudo rm -f '$sync_in_progress_file'"
}
trap "cleanup" EXIT

# Touch the sync-in-progress file and wait for all active git-gc processes
# to finish on the remote side. This signals to the git-gc machinery
# that no objects or packs should be discarded for the duration of the backup
# run, which is required in order to perform a consistent online backup.
ssh "$host" -- "
    sudo -u git -- touch '$sync_in_progress_file'

    sanity=0
    while [ \$sanity -lt 60 ]; do
        if ps axo pid,args | grep -q git.g[c]; then
            sleep 1
            sanity=\$(( sanity + 1 ))
        else
            exit 0
        fi
    done
    exit 1
" || {
    echo "Error: git-gc processes remain after 60 seconds. Aborting..." 1>&2
    exit 1
}

rsync_extra_excludes_args=$(
    echo "$rsync_extra_excludes" |
    xargs -n1 -IEXCLUDE echo --exclude='EXCLUDE' |
    xargs echo
)

# Function to build up an rsync command that transfers data from a live GHE
# environment to the local backup site. Repository data must be transfered in a
# specific order to guarantee repositories are transfered in a consistent state
# so multiple runs of rsync are required.
rsync_repository_data() {
    # default arguments
    rsync_args=(-azrh -P --delete --rsync-path='sudo -u git rsync')

    # use hardlinks if we can
    if ! $first_run; then
        rsync_args+=(--link-dest="../current")
    fi

    rsync_args+=("$@")
    rsync_args+=(--exclude='/*/*.git/*')
    rsync_args+=($rsync_extra_excludes_args)
    rsync_args+=("$host:$remote_repo_path/" "$backup_named")

    rsync "${rsync_args[@]}"
}

# Sync auxiliary repository data.
sync_file="repo_conf_sync_rules"
echo '+ *.git/HEAD' >> $sync_file
echo '+ *.git/audit_log' >> $sync_file
echo '+ *.git/config' >> $sync_file
echo '+ *.git/description' >> $sync_file
echo '+ *.git/git-daemon-export-ok' >> $sync_file
echo '+ *.git/hooks' >> $sync_file
echo '+ *.git/info' >> $sync_file
echo "$rsync_extra_excludes" | xargs -n1 -IRULE echo "- RULE/" >> $sync_file
echo '- *.git/*' >> $sync_file
rsync_repository_data --filter=". $sync_file"

# Sync packed refs files
rsync_repository_data --include='/*/*.git/packed-refs'

# Sync loose refs and ref logs
rsync_repository_data --include='/*/*.git/refs' --include='/*/*.git/logs'

# Sync loose objects and pack files
rsync_repository_data --include='/*/*.git/objects' --exclude='tmp_*'

# Update the current symlink
rm -f "$backup_current"
ln -s "$backup_date" "$backup_current"
