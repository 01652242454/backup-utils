#!/usr/bin/env bash
#/ Usage: ghe-rsync-backup
#/ Take an online, incremental snapshot of all Git repository data.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup when the GHE_BACKUP_STRATEGY is set to "rsync".
set -e

# This command is designed to allow for transferring active Git repository data
# from a GitHub instance to a backup site in a way that ensures data is
# captured in a consistent state even when being written to.
#
# - All Git GC operations are disabled on the GitHub instance for the duration of
#   the backup. This removes the possibly of objects or packs being removed
#   while the backup is in progress.
#
# - In progress Git GC operations are given a cooldown window to complete. The
#   script will sleep for up to 60 seconds waiting for GC operations to finish.
#
# - Git repository data is transferred in a specific order: auxiliary files,
#   packed refs, loose refs, reflogs, and finally objects and pack files in that
#   order. This ensures that all referenced objects are captured.
#
# - Git GC operations are re-enabled on the GitHub instance.
#
# The script uses multiple runs of rsync to transfer repository files. Each run
# includes a list of filter rules that ensure only specific types of files are
# transferred.
#
# See the "FILTER RULES" and "INCLUDE/EXCLUDE PATTERN RULES" sections of the
# rsync(1) manual for more information:
#      <http://rsync.samba.org/ftp/rsync/rsync.html>

# Bring in the backup configuration
cd $(dirname "$0")/..
. scripts/ghe-backup-config

# Set up remote host and root backup snapshot directory based on config
host="admin@$GHE_HOSTNAME"
backup_dir="$GHE_SNAPSHOT_DIR/repositories"

# Location of last good backup for rsync --link-dest
backup_current="$GHE_DATA_DIR/current/repositories"

# Remote sync-in-progress file location. When this file exists, Git GC
# operations are disabled on the GitHub instance.
sync_in_progress_file="$GHE_REMOTE_DATA_DIR/.sync_in_progress"

# Verify rsync is available.
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Make sure root backup dir exists if this is the first run
mkdir -p "$backup_dir"

# Removes the remote sync-in-progress file on exit, re-enabling GC operations
# on the remote instance.
cleanup() {
  ssh "$host" -- "sudo rm -f '$sync_in_progress_file'"
}
trap "cleanup" EXIT

# Touch the sync-in-progress file, disabling GC operations, and wait for all
# active GC processes to finish on the remote side.
ssh "$host" -- "
    set -e
    sudo -u git touch '$sync_in_progress_file'

    sanity=0
    while [ \$sanity -lt 60 ]; do
        if ps axo pid,args | grep -q git.g[c]; then
            sleep 1
            sanity=\$(( sanity + 1 ))
        else
            exit 0
        fi
    done
    exit 7
" || {
    res=$?
    if [ $res = 7 ]; then
        echo "Error: git-gc processes remain after 60 seconds. Aborting..." 1>&2
    fi
    exit $res
}

# Transfer repository data from a GitHub instance to the current snapshot
# directory, using a previous snapshot to avoid transferring files that have
# already been transferred. A set of rsync filter rules are provided on stdin
# for each invocation.
rsync_repository_data () {
    # basic arguments and args passed to us
    rsync_args=(-av --rsync-path='sudo -u git rsync')
    rsync_args+=(--include-from=- --exclude=\*)
    rsync_args+=("$@")

    # use previous snapshot when present for incremental backup
    if [ -d "$backup_current" ]; then
        rsync_args+=(--link-dest="../../current/repositories")
    fi

    # write into new snapshot directory
    rsync_args+=("$host:$GHE_REMOTE_DATA_DIR/" "$backup_dir")

    # run the rsync command
    rsync "${rsync_args[@]}"
}


# Sync all auxiliary repository data. This includes files and directories like
# HEAD, audit_log, config, description, info/, etc. No refs or object data
# should be transferred here.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
- /*/*.git/objects
- /*/*.git/refs
- /*/*.git/packed-refs
- /*/*.git/logs
+ /*/*.git/**
RULES

# Sync packed refs files. This is performed before sync'ing loose refs since
# loose refs trump packed-refs information.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/packed-refs
RULES

# Sync loose refs and reflogs. This must be performed before object data is
# transferred to ensure that all referenced objects are included.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/refs
+ /*/*.git/refs/**
+ /*/*.git/logs
+ /*/*.git/logs/**
RULES

# Sync git objects and pack files. Compressing is disabled during this phase
# since these files are already well compressed.
rsync_repository_data <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/objects
- tmp_*
+ /*/*.git/objects/**
RULES
