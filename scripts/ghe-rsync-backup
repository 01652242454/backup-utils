#!/usr/bin/env bash
#/ Usage: ghe-rsync-backup
#/ Take online, incremental snapshot of all Git repository data.
set -e

# Bring in the backup configuration
cd $(dirname "$0")/..
. scripts/ghe-backup-config

# Set up remote host and root backup snapshot directory based on config
host="admin@$GHE_HOSTNAME"
backup_dir="$GHE_SNAPSHOT_DIR/repositories"

# Location of last good backup for rsync --link-dest
backup_current="$GHE_DATA_DIR/current/repositories"

# Remote file locations
sync_in_progress_file="$GHE_REMOTE_DATA_DIR/.sync_in_progress"

# List of auxiliary git repository files. These are transferred before all refs,
# reflogs, and object data.
repository_auxiliary_files="
    COMMIT_EDITMSG
    HEAD
    audit_log
    branches
    config
    description
    git-daemon-export-ok
    hooks
    info
    svn.history.msgpack
    svn_data
"

# List of special directories under the remote /data/repositories directory.
# These contain non-repository data and must be treated specially.
special_data_dirs="
    __alambic_assets__
    __gitmon__
    __hookshot__
    __nodeload_archives__
    __purgatory__
    __render__
"

# Verify rsync is available
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Verify ssh connectivity with the GHE host.
ghe-host-check 1>/dev/null

# Make sure root backup dir exists if this is the first run
mkdir -p "$backup_dir"

# Cleans up the local rsync rules file and remote sync-in-progress file on exit.
cleanup() {
  ssh "$host" -- "sudo rm -f '$sync_in_progress_file'"
}
trap "cleanup" EXIT

# Touch the sync-in-progress file and wait for all active git-gc processes
# to finish on the remote side. This signals to the git-gc machinery
# that no objects or packs should be discarded for the duration of the backup
# run, which is required in order to perform a consistent online backup.
ssh "$host" -- "
    set -e
    sudo -u git touch '$sync_in_progress_file'

    sanity=0
    while [ \$sanity -lt 60 ]; do
        if ps axo pid,args | grep -q git.g[c]; then
            sleep 1
            sanity=\$(( sanity + 1 ))
        else
            exit 0
        fi
    done
    exit 1
" || {
    echo "Error: git-gc processes remain after 60 seconds. Aborting..." 1>&2
    exit 1
}

# Function to rsync repository data from a GitHub instance to the local
# backup site. Repository data must be transfered in a specific order to
# guarantee data is in a consistent state so multiple runs of rsync are
# required. Each invocation provides a list of --include arguments for the
# specific files to be transferred in the run, which are combined with
# general arguments and exclude rules.
rsync_repository_data() {
    rsync_args=(-a --verbose --rsync-path='sudo -u git rsync')

    # use previous snapshot when present for incremental backup
    if [ -d "$backup_current" ]; then
        rsync_args+=(--link-dest="../../current/repositories")
    fi

    # add provided include rules and other arguments
    rsync_args+=("$@")

    # exclude all __special__ dirs
    rsync_args+=(--exclude='/*/*.git/*')
    for dir in $special_data_dirs; do
        rsync_args+=(--exclude="/$dir")
    done
    rsync_args+=(--exclude="/$(basename "$sync_in_progress_file")")

    # write into new snapshot directory
    rsync_args+=("$host:$GHE_REMOTE_DATA_DIR/" "$backup_dir")

    # run the rsync command
    rsync "${rsync_args[@]}"
}

# Sync auxiliary repository data.
auxiliary_include_args=()
for f in $repository_auxiliary_files; do
    auxiliary_include_args+=(--include="/*/*.git/$f")
done
rsync_repository_data -z "${auxiliary_include_args[@]}"

# Sync packed refs files
rsync_repository_data -z --include='/*/*.git/packed-refs'

# Sync loose refs and ref logs
rsync_repository_data -z --include='/*/*.git/refs' --include='/*/*.git/logs'

# Sync loose objects and pack files
rsync_repository_data --include='/*/*.git/objects' --exclude='tmp_*'
