#!/usr/bin/env bash
#/ Usage: ghe-rsync-backup
#/ Take online, incremental snapshot of all Git repository data.
set -e

# Bring in the backup configuration
cd $(dirname "$0")/..
. scripts/ghe-backup-config

# Set up remote host and root backup snapshot directory based on config
host="admin@$GHE_HOSTNAME"
backup_dir="$GHE_SNAPSHOT_DIR/repositories"

# Location of last good backup for rsync --link-dest
backup_current="$GHE_DATA_DIR/current/repositories"

# Remote file locations
sync_in_progress_file="$GHE_REMOTE_DATA_DIR/.sync_in_progress"

# Verify rsync is available
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Make sure root backup dir exists if this is the first run
mkdir -p "$backup_dir"

# Cleans up the local rsync rules file and remote sync-in-progress file on exit.
cleanup() {
  ssh "$host" -- "sudo rm -f '$sync_in_progress_file'"
}
trap "cleanup" EXIT

# Touch the sync-in-progress file and wait for all active git-gc processes
# to finish on the remote side. This signals to the git-gc machinery
# that no objects or packs should be discarded for the duration of the backup
# run, which is required in order to perform a consistent online backup.
ssh "$host" -- "
    set -e
    sudo -u git touch '$sync_in_progress_file'

    sanity=0
    while [ \$sanity -lt 60 ]; do
        if ps axo pid,args | grep -q git.g[c]; then
            sleep 1
            sanity=\$(( sanity + 1 ))
        else
            exit 0
        fi
    done
    exit 7
" || {
    res=$?
    if [ $res = 7 ]; then
        echo "Error: git-gc processes remain after 60 seconds. Aborting..." 1>&2
    fi
    exit $res
}

# Function to rsync repository data from a GitHub instance to the local
# backup site. Repository data must be transfered in a specific order to
# guarantee data is in a consistent state so multiple runs of rsync are
# required. Each invocation provides a list of --include arguments for the
# specific files to be transferred in the run, which are combined with
# general arguments and exclude rules.
rsync_repository_data () {
    # basic arguments and args passed to us
    rsync_args=(-av --rsync-path='sudo -u git rsync')
    rsync_args+=(--include-from=- --exclude=\*)
    rsync_args+=("$@")

    # use previous snapshot when present for incremental backup
    if [ -d "$backup_current" ]; then
        rsync_args+=(--link-dest="../../current/repositories")
    fi

    # write into new snapshot directory
    rsync_args+=("$host:$GHE_REMOTE_DATA_DIR/" "$backup_dir")

    # run the rsync command
    rsync "${rsync_args[@]}"
}


# Sync all auxiliary repository data. This includes files and directories like
# HEAD, audit_log, config, description, info/, etc. No refs or object data
# should be transferred here.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
- /*/*.git/objects
- /*/*.git/refs
- /*/*.git/packed-refs
- /*/*.git/logs
+ /*/*.git/**
RULES

# Sync packed refs files. This is performed before sync'ing loose refs since
# loose refs trump packed-refs information.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/packed-refs
RULES

# Sync loose refs and reflogs. This must be performed before object data is
# transferred to ensure that all referenced objects are included.
rsync_repository_data -z <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/refs
+ /*/*.git/refs/**
+ /*/*.git/logs
+ /*/*.git/logs/**
RULES

# Sync git objects and pack files. Compressing is disabled during this phase
# since these files are already well compressed.
rsync_repository_data <<RULES
- /__*__/
+ /*/
+ /*/*.git
+ /*/*.git/objects
- tmp_*
+ /*/*.git/objects/**
RULES
