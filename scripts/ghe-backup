#!/bin/sh
#/ Usage: ghe-backup [-v]
#/ Take snapshots of all GitHub Enterprise data, including Git repository data,
#/ the MySQL database, instance settings, GitHub Pages data, etc.
#/
#/ With -v, enable verbose output and show more information about what's being
#/ transferred.
set -e

# Bring in the backup configuration
cd $(dirname "$0")/..
. scripts/ghe-backup-config

# Host we're backing up
host="$GHE_HOSTNAME"

# Used to record failed backup steps
failures=

echo "Starting backup of $host in snapshot $GHE_SNAPSHOT_TIMESTAMP"

# Make sure we have SSH connectivity to the GHE host
ghe-host-check || exit 1

# Create the timestamped snapshot directory where files for this run will live.
mkdir -p "$GHE_SNAPSHOT_DIR"
cd "$GHE_SNAPSHOT_DIR"

# Mark the snapshot as incomplete
touch "incomplete"

echo "Backing up GitHub settings ..."
ghe-ssh "$host" -- 'ghe-export-settings' > settings.json ||
failures="$failures settings"

ghe-ssh "$host" -- "cat '$GHE_REMOTE_LICENSE_FILE'" > enterprise.ghl ||
failures="$failures license"

echo "Backing up Git repositories ..."
ghe-${GHE_BACKUP_STRATEGY}-backup ||
failures="$failures repositories"

echo "Backing up GitHub Pages ..."
ghe-ssh "$host" -- "
    if [ -d /data/pages ]; then
        ghe-export-pages
    else
        tar cvf - --files-from /dev/null
    fi
" > pages.tar ||
failures="$failures pages"

echo "Backing up MySQL database ..."
ghe-ssh "$host" -- 'ghe-export-mysql | gzip' > mysql.sql.gz ||
failures="$failures mysql"

echo "Backing up Redis database ..."
ghe-ssh "$host" -- 'ghe-export-redis' > redis.rdb ||
failures="$failures redis"

echo "Backing up SSH public keys ..."
ghe-ssh "$host" -- 'ghe-export-authorized-keys' > authorized-keys.json ||
failures="$failures authorized-keys"

echo "Backing up SSH host keys ..."
ghe-ssh "$host" -- 'ghe-export-ssh-host-keys' > ssh-host-keys.tar ||
failures="$failures ssh-host-keys"

echo "Backing up Elasticsearch indices ..."
ghe-ssh "$host" -- 'ghe-export-es-indices' > es-indices.tar ||
failures="$failures ssh-host-keys"

# If everything was successful, mark the snapshot as complete, update the
# current symlink to point to the new snapshot and prune expired and failed
# snapshots.
if [ -z "$failures" ]; then
    rm "incomplete"

    rm -f "../current"
    ln -s "$GHE_SNAPSHOT_TIMESTAMP" "../current"

    ghe-prune-snapshots
fi

echo "Completed backup of $host in snapshot $GHE_SNAPSHOT_TIMESTAMP at $(date +"%H:%M:%S")"

# Exit non-zero and list the steps that failed.
if [ -n "$failures" ]; then
    steps="$(echo $failures | sed 's/ /, /g')"
    echo "Error: Snapshot incomplete. Some steps failed: ${steps}. "
    exit 1
fi

# Make sure we exit zero after the conditional
true
