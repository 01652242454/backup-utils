#!/bin/sh
#/ Usage: ghe-backup-pages-rsync
#/ Take an online, incremental snapshot of all Pages data.
#/
#/ Note: This command typically isn't called directly. It's invoked by
#/ ghe-backup when the GHE_BACKUP_STRATEGY is set to "rsync".
set -e

# Bring in the backup configuration
cd $(dirname "$0")/..
. libexec/ghe-backup-config

# Set up remote host and root backup snapshot directory based on config
host="$GHE_HOSTNAME"
backup_dir="$GHE_SNAPSHOT_DIR/pages"

# Location of last good backup for rsync --link-dest
backup_current="$GHE_DATA_DIR/current/pages"

# Verify rsync is available.
if ! rsync --version 1>/dev/null 2>&1; then
    echo "Error: rsync not found." 1>&2
    exit 1
fi

# Make sure root backup dir exists if this is the first run
mkdir -p "$backup_dir"

# Verify that the /data/pages directory exists. It won't if no pages sites have
# been published under some versions.
ghe-ssh "$host" -- "[ -d '$GHE_REMOTE_PAGES_DIR' ]" || exit 0

# If we have a previous increment, avoid transferring existing files via rsync's
# --link-dest support. This also decreases physical space usage considerably.
if [ -d "$backup_current" ]; then
    link_dest="--link-dest=../../current/pages"
fi

# Transfer Pages data from a GitHub instance to the current snapshot
# directory, using a previous snapshot to avoid transferring files that have
# already been transferred. A set of rsync filter rules are provided on stdin
# for each invocation.
rsync -av -e ghe-ssh $link_dest \
    --rsync-path='sudo -u git rsync' \
    "${host%:*}:$GHE_REMOTE_PAGES_DIR/" "$backup_dir" 1>&3
